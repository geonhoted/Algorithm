# -*- coding: utf-8 -*-
"""알고리즘 Challenge과제

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TPgkhprwQBmmd4NQ0G6_Sv5zb527q5Mf
"""

#다각형의 개수 및 이름 받고 몇개의 데이터랄 받아야 하는지 지정
#for 구문 돌려서 다각형 별 포함하는 격자점의 개수 파악
##상하좌우 절대값 최소값 구해서 수업에 배운 코드 적용
#다각형별 중복되는 격자점만 뽑아와서 넓이 구하기

def LR(A, B, C):
  result1 = (A[0] * B[1]) + (B[0]*C[1]) + (C[0] * A[1])
  result2 = (B[0] * A[1]) + (C[0] * B[1]) + (A[0] * C[1])
  result = result1 - result2
  if (result > 0):
    return 'L'
  elif (result < 0):
    return 'R'
  else:
    return 'S'

def Cross(A, B, C, D):
  if (LR(A, B, C) != LR(A, B, D)):
    if (LR(C, D, A) != LR(C, D, B)):
      return True
  return False

figures = len(input().split())    #입력받을 다각형 수 저장

data = []
minmax = []

for i in range(0,figures):        #다각형 개수 만큼 반복
  x = input().split()             #특정 다각형 x및 y좌표 집합
  y = input().split()
  x = [int(elements) for elements in x]
  y = [int(elements) for elements in y]

  mm = [min(x), max(x), min(y), max(y)]
  minmax.append(mm)

  points = []

  for j in range(0,len(x)):       #좌표 쌍 생성 후 특정 다각형 집합(points) 안에 데이터 삽입
    pair = []
    pair.append(x[j])
    pair.append(y[j])
    points.append(pair)

  data.append(points)             #data안에 입력받은 모든 좌표 데이터 저장

data_area = []                    #다각형 별 포함하는 모든 격자점 데이터 저장
for n in range(len(data)):
  p = data[n]
  p.append(p[0])
  for x in range(len(p)):
    for y in range(len(p[x])):
      p[x][y] = int(p[x][y])
  r = minmax[n]

  area = []


  for a in range(int(r[0]), int(r[1])+1):                   #시간복잡도 줄이기 위해 각 다각형 별로 최소,최대 x,y 범위 산정하여 해당 범위 내에서만 내부/외부 여부 검사
    for b in range(int(r[2]), int(r[3])+1):
      count = 0

      for i in range(0, len(p) - 1):
        if (p[i][1] == p[i+1][1]):
          count = count
        elif ((p[i][1] == b) and (a < p[i][0])):
          if (p[i+1][1] > p[i][1]):
            count = count + 1
        elif ((p[i+1][1] == b) and (a < p[i+1][0])):
          if (p[i][1] > p[i+1][1]):
            count = count + 1
        else:
          if Cross(p[i], p[i+1], [a, b], [100000000, b]) == True:
            count = count + 1

      if (count % 2) == 1:                                  #Week 10 코드 참조하여 다각형 내부에 있는 좌표는 area라는 리스트에 다각형 별로 따로 저장 후 data_area에 모두 저장
        area.append([a, b])

  data_area.append(area)


last = data_area[0]                                   # last에는 모든 다각형에 공통으로 있는 격자점들이 저장됨
for i in range(1, len(data_area)):
    last = [x for x in last if x in data_area[i]]

print(len(last))                                        #1x1간격으로 이루어진 격자점 구역에서는 격자점의 수가 대략 해당 구역의 넓이와 유사함.